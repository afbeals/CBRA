{
  "stats": {
    "suites": 67,
    "tests": 133,
    "passes": 133,
    "pending": 0,
    "failures": 0,
    "start": "2019-12-22T01:00:33.406Z",
    "end": "2019-12-22T01:00:35.676Z",
    "duration": 2270,
    "testsRegistered": 133,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "e1d5e02b-7828-4bda-94ff-f75e2c7ce3fe",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "eb33da0a-fe51-4d8b-91c0-38436a7e01a5",
        "title": "Root Middleware Test",
        "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\__tests__\\rootMiddleware.test.js",
        "file": "\\src\\modules\\__tests__\\rootMiddleware.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "beea163c-2fa4-44c5-9b6c-9cad8dd8d9e4",
            "title": "modules/rootMiddleware",
            "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\__tests__\\rootMiddleware.test.js",
            "file": "\\src\\modules\\__tests__\\rootMiddleware.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should exist",
                "fullTitle": "Root Middleware Test modules/rootMiddleware Should exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "_chai.assert.exists(_rootMiddleware[\"default\"], 'rootMiddleware not found');",
                "err": {},
                "isRoot": false,
                "uuid": "f71884f1-14f7-450d-963f-9df28ff5b847",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should export an array",
                "fullTitle": "Root Middleware Test modules/rootMiddleware Should export an array",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "_chai.assert.equal(Array.isArray(_rootMiddleware[\"default\"]), true, 'rootMiddlware not a array');",
                "err": {},
                "isRoot": false,
                "uuid": "6772f8e6-4a55-4139-b300-82ec6b9af9c3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f71884f1-14f7-450d-963f-9df28ff5b847",
              "6772f8e6-4a55-4139-b300-82ec6b9af9c3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "52bcf1dd-6d72-4363-bfbb-f64491d846b3",
        "title": "Root Persist Test",
        "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\__tests__\\rootPersist.test.js",
        "file": "\\src\\modules\\__tests__\\rootPersist.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "efada567-505e-4e8d-8724-18fc5e9be8e1",
            "title": "modules/rootPersist",
            "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\__tests__\\rootPersist.test.js",
            "file": "\\src\\modules\\__tests__\\rootPersist.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should exist",
                "fullTitle": "Root Persist Test modules/rootPersist Should exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "_chai.assert.exists(_rootPersist[\"default\"], 'rootPersist not found');",
                "err": {},
                "isRoot": false,
                "uuid": "b39ce4c4-3610-4425-8b5c-cd6e37b8009c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should export an object",
                "fullTitle": "Root Persist Test modules/rootPersist Should export an object",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "_chai.assert.equal(_typeof(_rootPersist[\"default\"]), 'object', 'rootPersist not a object');",
                "err": {},
                "isRoot": false,
                "uuid": "1200e56a-806d-4ce3-8f10-e5b3285d444d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b39ce4c4-3610-4425-8b5c-cd6e37b8009c",
              "1200e56a-806d-4ce3-8f10-e5b3285d444d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d3b31e6e-1967-4263-a7e7-7a0c3da4eeb3",
        "title": "Root Reducer Test",
        "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\__tests__\\rootReducer.test.js",
        "file": "\\src\\modules\\__tests__\\rootReducer.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9d3c798e-b7e6-47da-a015-a9583685ae8f",
            "title": "modules/rootReducer",
            "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\__tests__\\rootReducer.test.js",
            "file": "\\src\\modules\\__tests__\\rootReducer.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should exist",
                "fullTitle": "Root Reducer Test modules/rootReducer Should exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "_chai.assert.exists(_rootReducer[\"default\"], 'rootReducer not found');",
                "err": {},
                "isRoot": false,
                "uuid": "a65df1f4-8d84-4cec-90dd-4ba696239097",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should export an object",
                "fullTitle": "Root Reducer Test modules/rootReducer Should export an object",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "_chai.assert.equal(_typeof(_rootReducer[\"default\"]), 'object', 'rootReducer not a object');",
                "err": {},
                "isRoot": false,
                "uuid": "61b52564-3fe5-4282-8b92-fe2e5ccd8ac3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a65df1f4-8d84-4cec-90dd-4ba696239097",
              "61b52564-3fe5-4282-8b92-fe2e5ccd8ac3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e351d81f-7abb-401c-ac7e-1e61a6c50e1c",
        "title": "Root Saga Test",
        "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\__tests__\\rootSaga.test.js",
        "file": "\\src\\modules\\__tests__\\rootSaga.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "32982c27-a48d-42a1-a093-9c1e9b30cdd9",
            "title": "modules/rootSaga",
            "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\__tests__\\rootSaga.test.js",
            "file": "\\src\\modules\\__tests__\\rootSaga.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should exist",
                "fullTitle": "Root Saga Test modules/rootSaga Should exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "_chai.assert.exists(_rootSaga[\"default\"], 'rootSaga not found');",
                "err": {},
                "isRoot": false,
                "uuid": "41466ce4-eb9f-4473-a772-b835d544826e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should export a function",
                "fullTitle": "Root Saga Test modules/rootSaga Should export a function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "_chai.assert.equal(_typeof(_rootSaga[\"default\"]), 'function', 'rootSaga not a function');",
                "err": {},
                "isRoot": false,
                "uuid": "5ab158cc-6b40-4234-9810-64964f5cac40",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "41466ce4-eb9f-4473-a772-b835d544826e",
              "5ab158cc-6b40-4234-9810-64964f5cac40"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a14bf1af-fe41-477f-8787-b9305246be29",
        "title": "Application Module Tests: ",
        "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\application\\__tests__\\application.test.js",
        "file": "\\src\\modules\\application\\__tests__\\application.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a2d5c41a-34c2-409d-ad39-1cea7a8800d9",
            "title": "Actions:",
            "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\application\\__tests__\\application.test.js",
            "file": "\\src\\modules\\application\\__tests__\\application.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "a03c2c89-1b7e-4dbb-bf9f-dcc7bcf242f9",
                "title": "Overlay actions:",
                "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\application\\__tests__\\application.test.js",
                "file": "\\src\\modules\\application\\__tests__\\application.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Should set the overlay to display",
                    "fullTitle": "Application Module Tests:  Actions: Overlay actions: Should set the overlay to display",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "_chai.assert.deepEqual(_actions[\"default\"].appShowOverlay(), {\n  type: OVERLAY_SHOW\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a1ee9bca-8dc6-4cc9-945c-73b62aadfb3b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should set the overlay to hide",
                    "fullTitle": "Application Module Tests:  Actions: Overlay actions: Should set the overlay to hide",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "_chai.assert.deepEqual(_actions[\"default\"].appHideOverlay(), {\n  type: OVERLAY_HIDE\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b3429fb9-9c8e-4ec4-a6a8-990660b556c9",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "a1ee9bca-8dc6-4cc9-945c-73b62aadfb3b",
                  "b3429fb9-9c8e-4ec4-a6a8-990660b556c9"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 2,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "26b4a15f-11bf-4066-bb2e-5cd76527700a",
                "title": "Notification Actions:",
                "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\application\\__tests__\\application.test.js",
                "file": "\\src\\modules\\application\\__tests__\\application.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Should set the notification to display",
                    "fullTitle": "Application Module Tests:  Actions: Notification Actions: Should set the notification to display",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var params = {\n  type: SUCCESS,\n  timer: 3000,\n  msg: 'great'\n};\n_chai.assert.deepEqual(_actions[\"default\"].appShowNotify(params), {\n  type: NOTIFY_SHOW,\n  payload: params\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fa4f3826-450e-4773-b428-b4ea0b524523",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should set the overlay to hide",
                    "fullTitle": "Application Module Tests:  Actions: Notification Actions: Should set the overlay to hide",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "_chai.assert.deepEqual(_actions[\"default\"].appHideNotify(), {\n  type: NOTIFY_HIDE\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "72a3c95b-6784-46cb-af51-4ff25144f148",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "fa4f3826-450e-4773-b428-b4ea0b524523",
                  "72a3c95b-6784-46cb-af51-4ff25144f148"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "c83a6f17-2d55-4166-9b9f-bcb4f794c041",
                "title": "Log Actions:",
                "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\application\\__tests__\\application.test.js",
                "file": "\\src\\modules\\application\\__tests__\\application.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Should submit app log",
                    "fullTitle": "Application Module Tests:  Actions: Log Actions: Should submit app log",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "_chai.assert.deepEqual(_actions[\"default\"].appCreateLog('log message payload'), {\n  type: LOG,\n  payload: 'log message payload'\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3997e4d4-e2f0-494d-9964-3a44f5c4e31a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should accept the created log",
                    "fullTitle": "Application Module Tests:  Actions: Log Actions: Should accept the created log",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "_chai.assert.deepEqual(_actions[\"default\"].appLogSuccess(), {\n  type: LOG_ACCEPTED\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "95cc0e54-e142-4781-a877-69f20851021f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should decline the app log",
                    "fullTitle": "Application Module Tests:  Actions: Log Actions: Should decline the app log",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "_chai.assert.deepEqual(_actions[\"default\"].appLogDeclined(), {\n  type: LOG_DECLINED\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "262cb136-fdac-4bf6-97cd-ad58c60f7e8e",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "3997e4d4-e2f0-494d-9964-3a44f5c4e31a",
                  "95cc0e54-e142-4781-a877-69f20851021f",
                  "262cb136-fdac-4bf6-97cd-ad58c60f7e8e"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "25b41195-ac18-4d39-b127-c3781a6fdb2d",
                "title": "Page Actions:",
                "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\application\\__tests__\\application.test.js",
                "file": "\\src\\modules\\application\\__tests__\\application.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Should submit app log",
                    "fullTitle": "Application Module Tests:  Actions: Page Actions: Should submit app log",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "_chai.assert.deepEqual(_actions[\"default\"].pageLoadError('home'), {\n  type: PAGE_LOAD_ERROR,\n  payload: 'home'\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "024fba7e-d1a4-4595-bf90-bc27fa523f01",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "024fba7e-d1a4-4595-bf90-bc27fa523f01"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "edf6bbda-c74d-4fdd-b545-d64626867ac7",
            "title": "Reducer",
            "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\application\\__tests__\\application.test.js",
            "file": "\\src\\modules\\application\\__tests__\\application.test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Application Module Tests:  Reducer \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "initialStore = _utility[\"default\"].buildInitialStore(); // assign for each test block",
                "err": {},
                "isRoot": false,
                "uuid": "e0f014ad-d532-4ee0-8cb6-b523e84d69ef",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should have initial store",
                "fullTitle": "Application Module Tests:  Reducer Should have initial store",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "_chai.assert.deepEqual((0, _reducer[\"default\"])(undefined, {}), initialStore);",
                "err": {},
                "isRoot": false,
                "uuid": "64bf85a1-5228-4774-b63c-7fa4c265732d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should handle showing the overlay",
                "fullTitle": "Application Module Tests:  Reducer Should handle showing the overlay",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "_chai.assert.deepEqual((0, _reducer[\"default\"])(initialStore, {\n  type: OVERLAY_SHOW\n}), mockStore({\n  displayOverlay: 1\n}));",
                "err": {},
                "isRoot": false,
                "uuid": "2d27797c-d72a-4e54-8c4c-7c94d663eaa4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should handle hiding the overlay",
                "fullTitle": "Application Module Tests:  Reducer Should handle hiding the overlay",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "_chai.assert.deepEqual((0, _reducer[\"default\"])(mockStore({\n  displayOverlay: 1\n}), {\n  type: OVERLAY_HIDE\n}), initialStore);",
                "err": {},
                "isRoot": false,
                "uuid": "b074c822-4d69-4be2-95d8-7122bd3e1800",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should handle showing the notification",
                "fullTitle": "Application Module Tests:  Reducer Should handle showing the notification",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var payload = {\n  type: 'success',\n  duration: 2342,\n  msg: 'hello'\n};\n_chai.assert.deepEqual((0, _reducer[\"default\"])(initialStore, {\n  type: NOTIFY_SHOW,\n  payload: payload\n}), mockStore({\n  notify: _objectSpread({}, payload)\n}));",
                "err": {},
                "isRoot": false,
                "uuid": "1a52a9b9-ddd9-4130-9a10-9c4d58f1f977",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should handle hiding the notification",
                "fullTitle": "Application Module Tests:  Reducer Should handle hiding the notification",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "_chai.assert.deepEqual((0, _reducer[\"default\"])(mockStore({\n  notify: {}\n}), {\n  type: NOTIFY_HIDE\n}), initialStore);",
                "err": {},
                "isRoot": false,
                "uuid": "09848d4c-8697-4b1a-b175-5d4abce6a155",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "64bf85a1-5228-4774-b63c-7fa4c265732d",
              "2d27797c-d72a-4e54-8c4c-7c94d663eaa4",
              "b074c822-4d69-4be2-95d8-7122bd3e1800",
              "1a52a9b9-ddd9-4130-9a10-9c4d58f1f977",
              "09848d4c-8697-4b1a-b175-5d4abce6a155"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "a81c6612-1d71-42e8-bbeb-89285d4cd358",
            "title": "Selectors",
            "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\application\\__tests__\\application.test.js",
            "file": "\\src\\modules\\application\\__tests__\\application.test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Application Module Tests:  Selectors \"before each\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "// assign for each test block\nmockStore.app = _utility[\"default\"].buildMockStore({\n  displayOverlay: true,\n  notify: {\n    type: 'success',\n    timer: 2342,\n    msg: 'notification'\n  }\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0cec3a79-7cb4-4c85-af40-0e1c74d6f83a",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should return equals",
                "fullTitle": "Application Module Tests:  Selectors Should return equals",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(selectors.getAppStore(mockStore)).to.deep.equal(mockStore.app).and.an('object');",
                "err": {},
                "isRoot": false,
                "uuid": "e596cc11-f5b4-44f1-a6d5-187f59efbc90",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should return the overlay status as a boolean",
                "fullTitle": "Application Module Tests:  Selectors Should return the overlay status as a boolean",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(selectors.getOverlayStatus(mockStore)).to.deep.equal(mockStore.app.displayOverlay).and.a('boolean');",
                "err": {},
                "isRoot": false,
                "uuid": "7eb18595-9222-4df4-bfe7-b57822b81ad8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should return the notification information",
                "fullTitle": "Application Module Tests:  Selectors Should return the notification information",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(selectors.getNotifyInfo(mockStore)).to.deep.equal(mockStore.app.notify).and.an('object');",
                "err": {},
                "isRoot": false,
                "uuid": "273acb80-b68e-4d07-8b94-f00a7b456862",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e596cc11-f5b4-44f1-a6d5-187f59efbc90",
              "7eb18595-9222-4df4-bfe7-b57822b81ad8",
              "273acb80-b68e-4d07-8b94-f00a7b456862"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "97a0669a-c92f-4ace-ad99-bd8acb855fca",
            "title": "Sagas",
            "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\application\\__tests__\\application.test.js",
            "file": "\\src\\modules\\application\\__tests__\\application.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "28bf39f6-40fe-48e4-bcad-a62d48c82a59",
                "title": "App Log Sagas: ",
                "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\application\\__tests__\\application.test.js",
                "file": "\\src\\modules\\application\\__tests__\\application.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "398eee67-ceda-411b-8b66-f01b573042d6",
                    "title": "Watchers: ",
                    "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\application\\__tests__\\application.test.js",
                    "file": "\\src\\modules\\application\\__tests__\\application.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "Should catch request to create application logs",
                        "fullTitle": "Application Module Tests:  Sagas App Log Sagas:  Watchers:  Should catch request to create application logs",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "return (0, _reduxSagaTestPlan.testSaga)(applicationSagas.watchAppCreateLog) // match to watcher\n.next() // start generator\n.takeLatest(LOG, applicationSagas.createAppLog) // match to generator\n.next() // step through generator\n.isDone();",
                        "err": {},
                        "isRoot": false,
                        "uuid": "875e38ab-944e-47c5-a955-7f4f7e3ad480",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "875e38ab-944e-47c5-a955-7f4f7e3ad480"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 4,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "f09db214-dcd6-47c1-9d8f-01722e1e0e7b",
                    "title": "Series: ",
                    "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\application\\__tests__\\application.test.js",
                    "file": "\\src\\modules\\application\\__tests__\\application.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "Should successfully go through app logging series",
                        "fullTitle": "Application Module Tests:  Sagas App Log Sagas:  Series:  Should successfully go through app logging series",
                        "timedOut": false,
                        "duration": 18,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var payload = 'log Message';\nvar meta = ['other info'];\nvar store = {\n  app: {\n    displayOverlay: true\n  },\n  router: {\n    location: {\n      pathname: '/'\n    }\n  }\n};\nvar url = '/';\nvar request = {\n  params: _objectSpread({\n    date: 'may 2nd, 2019',\n    time: '12:32:43',\n    message: payload,\n    store: store,\n    url: url\n  }, meta[1])\n};\nvar response = {\n  success: true\n};\nreturn (0, _reduxSagaTestPlan.expectSaga)(applicationSagas.createAppLog, {\n  payload: payload,\n  meta: meta\n}) // promise/generator\n.provide([// mock selector and api calls\n[(0, _effects.select)(), store], [matchers.call.fn(_api[\"default\"].createLog, request), {\n  data: response\n}] // supply mock return data from api\n]).put(_actions[\"default\"].appLogSuccess()) // eventual action that will be called\n.put(_actions[\"default\"].appShowNotify({\n  msg: 'Creating app log',\n  type: NORMAL\n})).dispatch(_actions[\"default\"].appCreateLog()) // dispatch action that starts saga\n.run();",
                        "err": {},
                        "isRoot": false,
                        "uuid": "36de4c15-9f7c-479f-84f1-266d6293841b",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "Should fail to go through logging series",
                        "fullTitle": "Application Module Tests:  Sagas App Log Sagas:  Series:  Should fail to go through logging series",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "return (0, _reduxSagaTestPlan.expectSaga)(applicationSagas.createAppLog, {\n  payload: 'log message'\n}).provide([[(0, _effects.select)(), {\n  app: {\n    displayOverlay: true\n  },\n  router: {\n    location: {\n      pathname: 'pathname'\n    }\n  }\n}], [matchers.call.fn(_api[\"default\"].createLog), (0, _providers.throwError)({\n  message: 'Error creating app log'\n})] // supply error that will be thrown by api\n]).put(_actions[\"default\"].appShowNotify({\n  type: 'error',\n  msg: 'Error creating log'\n})).put(_actions[\"default\"].appLogDeclined()).put(_actions[\"default\"].appShowNotify({\n  msg: 'Creating app log',\n  type: NORMAL\n})).dispatch(_actions[\"default\"].appCreateLog({\n  payload: 'log message'\n})).silentRun();",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6cd4e036-22f8-47e6-901e-7a2e56ba1661",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "36de4c15-9f7c-479f-84f1-266d6293841b",
                      "6cd4e036-22f8-47e6-901e-7a2e56ba1661"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 20,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "393f72f8-9aea-42c5-99d7-82991db079af",
        "title": "Error Module Tests: ",
        "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\error\\__tests__\\error.test.js",
        "file": "\\src\\modules\\error\\__tests__\\error.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6508bfd9-0cb8-4b57-96cf-4cfe937ec589",
            "title": "Actions",
            "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\error\\__tests__\\error.test.js",
            "file": "\\src\\modules\\error\\__tests__\\error.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should create an error",
                "fullTitle": "Error Module Tests:  Actions Should create an error",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var keyValue = 'pokedexDexError';\nvar clientErr = 'error fetching results';\nvar devErr = 'server error';\n_chai.assert.deepEqual(_actions[\"default\"].createStoreError({\n  keyValue: keyValue,\n  clientErr: clientErr,\n  devErr: devErr\n}), {\n  type: CREATE_ERROR,\n  payload: {\n    keyValue: keyValue,\n    clientErr: clientErr,\n    devErr: devErr\n  }\n});",
                "err": {},
                "isRoot": false,
                "uuid": "cc13e1dd-0f99-4268-a267-cbc329e2c32c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should clear an error from the store",
                "fullTitle": "Error Module Tests:  Actions Should clear an error from the store",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var errorKey = 'pokedexDexError';\n_chai.assert.deepEqual(_actions[\"default\"].clearStoreError(errorKey), {\n  type: CLEAR_ERROR,\n  payload: errorKey\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e48008ca-18bf-42bf-9eee-6235be0370cc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cc13e1dd-0f99-4268-a267-cbc329e2c32c",
              "e48008ca-18bf-42bf-9eee-6235be0370cc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "ad890f34-6364-4a1a-8879-c176395878b3",
            "title": "Reducer",
            "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\error\\__tests__\\error.test.js",
            "file": "\\src\\modules\\error\\__tests__\\error.test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Error Module Tests:  Reducer \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "initialState = _utility[\"default\"].buildInitialStore(); // assign for each test block",
                "err": {},
                "isRoot": false,
                "uuid": "05e13474-427a-44a8-a189-ec9dacf8fa5f",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should have initial store",
                "fullTitle": "Error Module Tests:  Reducer Should have initial store",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "_chai.assert.deepEqual((0, _reducer[\"default\"])(undefined, {}), initialState);",
                "err": {},
                "isRoot": false,
                "uuid": "60f20aeb-b00e-4aa9-bbc3-570372afc2dc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create an error",
                "fullTitle": "Error Module Tests:  Reducer Should create an error",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var keyValue = 'pokedexDexError';\nvar clientErr = 'Error Fetching Pokedex';\nvar devErr = 'server error';\nvar type = CREATE_ERROR;\nvar payload = {\n  keyValue: keyValue,\n  clientErr: clientErr,\n  devErr: devErr\n};\n_chai.assert.deepEqual((0, _reducer[\"default\"])(initialState, {\n  type: type,\n  payload: payload\n}), _utility[\"default\"].buildMockStore(_defineProperty({}, keyValue, clientErr)));",
                "err": {},
                "isRoot": false,
                "uuid": "780a32a6-7e29-4945-b0de-9b360af02bfa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should clear an error",
                "fullTitle": "Error Module Tests:  Reducer Should clear an error",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var keyValue = 'pokedexDexError';\nvar error = 'Error Fetching Pokedex';\nvar type = CLEAR_ERROR;\nvar payload = keyValue;\n_chai.assert.deepEqual((0, _reducer[\"default\"])(_utility[\"default\"].buildMockStore(_defineProperty({}, keyValue, error)), {\n  type: type,\n  payload: payload\n}), _utility[\"default\"].buildMockStore(_defineProperty({}, keyValue, null)));",
                "err": {},
                "isRoot": false,
                "uuid": "4f81ba2c-da8c-46a7-98b7-127e95fea463",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "60f20aeb-b00e-4aa9-bbc3-570372afc2dc",
              "780a32a6-7e29-4945-b0de-9b360af02bfa",
              "4f81ba2c-da8c-46a7-98b7-127e95fea463"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "19114284-2f6a-4c53-87d6-d3f8fd7b17c3",
            "title": "Selectors",
            "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\error\\__tests__\\error.test.js",
            "file": "\\src\\modules\\error\\__tests__\\error.test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Error Module Tests:  Selectors \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "// assign for each test block\ninitialStore.error = _utility[\"default\"].buildInitialStore();\nmockStore.error = _utility[\"default\"].buildMockStore({\n  pokedexDexError: 'Error Fetching'\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f14c96ae-f6ee-48e4-842a-624196ed3cb6",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should return equals",
                "fullTitle": "Error Module Tests:  Selectors Should return equals",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(selectors.getErrorStore(mockStore)).to.deep.equal(mockStore.error).and.an('object');",
                "err": {},
                "isRoot": false,
                "uuid": "5c9c2586-6cc6-4cad-9502-9608b7740e60",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should return error as string when available",
                "fullTitle": "Error Module Tests:  Selectors Should return error as string when available",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var errorSelector = selectors.createErrorSelector();\n(0, _chai.expect)(errorSelector(mockStore, 'pokedexDexError')).to.deep.equal(mockStore.error.pokedexDexError).and.a('string');",
                "err": {},
                "isRoot": false,
                "uuid": "ca740a3e-9e34-42aa-a7f6-ac6a88d01ddc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should return false when key unavaliable",
                "fullTitle": "Error Module Tests:  Selectors Should return false when key unavaliable",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var errorSelector = selectors.createErrorSelector();\n(0, _chai.expect)(errorSelector(initialStore, 'pokedexDexError')).to.be.a('null');",
                "err": {},
                "isRoot": false,
                "uuid": "7b8717b8-a9fc-490f-9a4b-1ea996493751",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5c9c2586-6cc6-4cad-9502-9608b7740e60",
              "ca740a3e-9e34-42aa-a7f6-ac6a88d01ddc",
              "7b8717b8-a9fc-490f-9a4b-1ea996493751"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6d03cc23-2a78-4fba-a0ab-6fb4438016f2",
        "title": "Fetching Module Tests: ",
        "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\fetching\\__tests__\\fetching.test.js",
        "file": "\\src\\modules\\fetching\\__tests__\\fetching.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "277427a8-725a-4535-a228-059fde585e26",
            "title": "Reducer",
            "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\fetching\\__tests__\\fetching.test.js",
            "file": "\\src\\modules\\fetching\\__tests__\\fetching.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should have initial store",
                "fullTitle": "Fetching Module Tests:  Reducer Should have initial store",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "_chai.assert.deepEqual((0, _reducer[\"default\"])(undefined, {}), initialState);",
                "err": {},
                "isRoot": false,
                "uuid": "c3f9dbce-1c5f-4bd7-8551-7155ab031625",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should set pokedex fetching request to true and fetched status to false",
                "fullTitle": "Fetching Module Tests:  Reducer Should set pokedex fetching request to true and fetched status to false",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var type = 'CBRA/POKEDEX/DEX_REQUEST';\n_chai.assert.deepEqual((0, _reducer[\"default\"])(initialState, {\n  type: type\n}), {\n  pokedexIsFetchingDex: true,\n  pokedexIsFetchedDex: false\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e3bd15f2-52cc-411f-91fd-b6489b89c690",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should set pokedex fetching request to false and fetched status to true",
                "fullTitle": "Fetching Module Tests:  Reducer Should set pokedex fetching request to false and fetched status to true",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var type = 'CBRA/POKEDEX/DEX_SUCCESS';\n_chai.assert.deepEqual((0, _reducer[\"default\"])(initialState, {\n  type: type\n}), {\n  pokedexIsFetchingDex: false,\n  pokedexIsFetchedDex: true\n});",
                "err": {},
                "isRoot": false,
                "uuid": "3af97e88-5aeb-44a6-91ef-61a49fbc80e5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should set pokedex fetching request to false and fetched status to false",
                "fullTitle": "Fetching Module Tests:  Reducer Should set pokedex fetching request to false and fetched status to false",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var type = 'CBRA/POKEDEX/DEX_FAIL';\n_chai.assert.deepEqual((0, _reducer[\"default\"])(initialState, {\n  type: type\n}), {\n  pokedexIsFetchingDex: false,\n  pokedexIsFetchedDex: false\n});",
                "err": {},
                "isRoot": false,
                "uuid": "3b118a14-8c71-4715-818c-4ecf4cc77a55",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should set pokedex fetching request to false and fetched status to false",
                "fullTitle": "Fetching Module Tests:  Reducer Should set pokedex fetching request to false and fetched status to false",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var type = 'CBRA/POKEDEX/DEX_CANCEL';\n_chai.assert.deepEqual((0, _reducer[\"default\"])(initialState, {\n  type: type\n}), {\n  pokedexIsFetchingDex: false,\n  pokedexIsFetchedDex: false\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e0bcb930-7a4f-4951-8299-a738104f568a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c3f9dbce-1c5f-4bd7-8551-7155ab031625",
              "e3bd15f2-52cc-411f-91fd-b6489b89c690",
              "3af97e88-5aeb-44a6-91ef-61a49fbc80e5",
              "3b118a14-8c71-4715-818c-4ecf4cc77a55",
              "e0bcb930-7a4f-4951-8299-a738104f568a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f3cd6c09-c3d1-49f3-8c65-20716526f0cc",
            "title": "Selectors",
            "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\fetching\\__tests__\\fetching.test.js",
            "file": "\\src\\modules\\fetching\\__tests__\\fetching.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should return equals",
                "fullTitle": "Fetching Module Tests:  Selectors Should return equals",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(selectors.getFetchingStore(mockStore)).to.deep.equal(mockStore.fetching).and.an('object');",
                "err": {},
                "isRoot": false,
                "uuid": "a3dd7dd6-dce3-48a3-b4e7-9be3215d8afa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should return fetching results for pokedex as bool",
                "fullTitle": "Fetching Module Tests:  Selectors Should return fetching results for pokedex as bool",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var fetchingSelector = selectors.createFetchSelector();\n(0, _chai.expect)(fetchingSelector(mockStore, 'pokedexIsFetchingDex')).to.deep.equal(mockStore.fetching.pokedexIsFetchingDex).and.a('boolean');",
                "err": {},
                "isRoot": false,
                "uuid": "fc1442e1-54b7-490d-a251-7dafaded8e55",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should return fetched results for pokedex as bool",
                "fullTitle": "Fetching Module Tests:  Selectors Should return fetched results for pokedex as bool",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var fetchingSelector = selectors.createFetchSelector();\n(0, _chai.expect)(fetchingSelector(mockStore, 'pokedexIsFetchedDex')).to.deep.equal(mockStore.fetching.pokedexIsFetchedDex).and.a('boolean');",
                "err": {},
                "isRoot": false,
                "uuid": "c341108a-2b8b-4095-ba8a-4908fb669108",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should return false when key unavaliable",
                "fullTitle": "Fetching Module Tests:  Selectors Should return false when key unavaliable",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var fetchingSelector = selectors.createFetchSelector();\n(0, _chai.expect)(fetchingSelector(initialStore, 'nonExistantResults')).to.equal(false).and.a('boolean');",
                "err": {},
                "isRoot": false,
                "uuid": "1b2e8cbf-08c0-4eb4-999e-c7e5a801cb05",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a3dd7dd6-dce3-48a3-b4e7-9be3215d8afa",
              "fc1442e1-54b7-490d-a251-7dafaded8e55",
              "c341108a-2b8b-4095-ba8a-4908fb669108",
              "1b2e8cbf-08c0-4eb4-999e-c7e5a801cb05"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d49069ef-5dc3-4280-8d94-088aa5488afe",
        "title": "Pokedex Module Tests: ",
        "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\pokedex\\__tests__\\pokedex.test.js",
        "file": "\\src\\modules\\pokedex\\__tests__\\pokedex.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6b45fd6d-beec-4ff4-ab50-d5ab019ec4c9",
            "title": "Actions",
            "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\pokedex\\__tests__\\pokedex.test.js",
            "file": "\\src\\modules\\pokedex\\__tests__\\pokedex.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should select a region",
                "fullTitle": "Pokedex Module Tests:  Actions Should select a region",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var region = 2;\n_chai.assert.deepEqual(_actions[\"default\"].selectRegion(region), {\n  type: SELECT_REGION,\n  payload: region\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e24012e3-488d-435b-8b9a-922bdc056df2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should reset the pokedex store",
                "fullTitle": "Pokedex Module Tests:  Actions Should reset the pokedex store",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "_chai.assert.deepEqual(_actions[\"default\"].reset(), {\n  type: RESET\n});",
                "err": {},
                "isRoot": false,
                "uuid": "efb46a05-16b2-4083-8d8c-d06c68fc623b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [
              {
                "uuid": "1ab7d623-d2af-4cc9-acd6-6b5b68b10ae1",
                "title": "Pokedex fetch: ",
                "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\pokedex\\__tests__\\pokedex.test.js",
                "file": "\\src\\modules\\pokedex\\__tests__\\pokedex.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Should create fetch dex request",
                    "fullTitle": "Pokedex Module Tests:  Actions Pokedex fetch:  Should create fetch dex request",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var region = '2';\n_chai.assert.deepEqual(_actions[\"default\"].fetchDex(region), {\n  type: FETCH_DEX,\n  payload: region\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ddaf2c6d-c3fe-4f06-b193-c18bd7a80af6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return successful dex fetch",
                    "fullTitle": "Pokedex Module Tests:  Actions Pokedex fetch:  Should return successful dex fetch",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var pokedex = {\n  name: 'kanto'\n};\n_chai.assert.deepEqual(_actions[\"default\"].fetchDexSuccess(pokedex), {\n  type: FETCH_DEX_SUCCESS,\n  payload: pokedex\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5793ed5d-3cec-46db-8847-1e8dd06ec7e7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return failed dex fetch",
                    "fullTitle": "Pokedex Module Tests:  Actions Pokedex fetch:  Should return failed dex fetch",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var devErr = 'error occured';\n_chai.assert.deepEqual(_actions[\"default\"].fetchDexFail(devErr), {\n  type: FETCH_DEX_FAIL,\n  payload: _utility[\"default\"].fetchDexError,\n  meta: {\n    devErr: devErr\n  }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c7625409-75fa-4d8c-a376-be9999f7edce",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return cancel fetch dex request",
                    "fullTitle": "Pokedex Module Tests:  Actions Pokedex fetch:  Should return cancel fetch dex request",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "_chai.assert.deepEqual(_actions[\"default\"].fetchDexCancel(), {\n  type: FETCH_DEX_CANCEL\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6f294353-1a0c-403e-8cb2-61e476636cf5",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "ddaf2c6d-c3fe-4f06-b193-c18bd7a80af6",
                  "5793ed5d-3cec-46db-8847-1e8dd06ec7e7",
                  "c7625409-75fa-4d8c-a376-be9999f7edce",
                  "6f294353-1a0c-403e-8cb2-61e476636cf5"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 1,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "86f85b85-2c9f-48cf-9486-4e364a8a80ab",
                "title": "Regions fetch: ",
                "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\pokedex\\__tests__\\pokedex.test.js",
                "file": "\\src\\modules\\pokedex\\__tests__\\pokedex.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Should create fetch regions request",
                    "fullTitle": "Pokedex Module Tests:  Actions Regions fetch:  Should create fetch regions request",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "_chai.assert.deepEqual(_actions[\"default\"].fetchRegions(), {\n  type: FETCH_REGIONS\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "829f187e-bd7e-4c68-a3eb-cf407e33ad24",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return successful region fetch",
                    "fullTitle": "Pokedex Module Tests:  Actions Regions fetch:  Should return successful region fetch",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var pokedex = {\n  name: 'kanto'\n};\n_chai.assert.deepEqual(_actions[\"default\"].fetchRegionsSuccess(pokedex), {\n  type: FETCH_REGIONS_SUCCESS,\n  payload: pokedex\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6028fb32-827f-42b2-b5b9-26d7528e795e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return failed regions fetch",
                    "fullTitle": "Pokedex Module Tests:  Actions Regions fetch:  Should return failed regions fetch",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var devErr = 'error occured';\n_chai.assert.deepEqual(_actions[\"default\"].fetchRegionsFail(devErr), {\n  type: FETCH_REGIONS_FAIL,\n  payload: _utility[\"default\"].fetchRegionsError,\n  meta: {\n    devErr: devErr\n  }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9110f36a-aa2c-44fa-96aa-62bd2b9be600",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return cancel fetch regions request",
                    "fullTitle": "Pokedex Module Tests:  Actions Regions fetch:  Should return cancel fetch regions request",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "_chai.assert.deepEqual(_actions[\"default\"].fetchRegionsCancel(), {\n  type: FETCH_REGIONS_CANCEL\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4adce8f0-a52c-4014-a3d3-d781d363bada",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "829f187e-bd7e-4c68-a3eb-cf407e33ad24",
                  "6028fb32-827f-42b2-b5b9-26d7528e795e",
                  "9110f36a-aa2c-44fa-96aa-62bd2b9be600",
                  "4adce8f0-a52c-4014-a3d3-d781d363bada"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 1,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [
              "e24012e3-488d-435b-8b9a-922bdc056df2",
              "efb46a05-16b2-4083-8d8c-d06c68fc623b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "ff50498e-96fd-4271-ab0b-405e5536619a",
            "title": "Reducer",
            "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\pokedex\\__tests__\\pokedex.test.js",
            "file": "\\src\\modules\\pokedex\\__tests__\\pokedex.test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Pokedex Module Tests:  Reducer \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "initialStore = _utility[\"default\"].buildInitialStore(); // assign for each test block",
                "err": {},
                "isRoot": false,
                "uuid": "94d0c8fe-5540-4db4-abfc-e9686b2e77f7",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should have initial store",
                "fullTitle": "Pokedex Module Tests:  Reducer Should have initial store",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "_chai.assert.deepEqual((0, _reducer[\"default\"])(undefined, {}), initialStore);",
                "err": {},
                "isRoot": false,
                "uuid": "5cd181b5-3305-4ac6-89c2-acf744e132dd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should handle fetch dex success",
                "fullTitle": "Pokedex Module Tests:  Reducer Should handle fetch dex success",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var type = FETCH_DEX_SUCCESS;\nvar payload = {\n  2: {\n    name: 'kanto',\n    id: 2\n  }\n};\n_chai.assert.deepEqual((0, _reducer[\"default\"])(initialStore, {\n  type: type,\n  payload: payload\n}), mockStore({\n  regions: {\n    2: payload['2']\n  }\n}));",
                "err": {},
                "isRoot": false,
                "uuid": "6eff79b7-4888-4333-be35-40e48836f190",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should handle fetch regions success",
                "fullTitle": "Pokedex Module Tests:  Reducer Should handle fetch regions success",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var type = FETCH_REGIONS_SUCCESS;\nvar payload = {\n  2: {\n    name: 'kanto',\n    id: 2\n  }\n};\n_chai.assert.deepEqual((0, _reducer[\"default\"])(initialStore, {\n  type: type,\n  payload: payload\n}), mockStore({\n  regions: {\n    2: payload['2']\n  }\n}));",
                "err": {},
                "isRoot": false,
                "uuid": "453ad77e-ec83-49f3-8d3b-b789fd57293d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should handle region selection",
                "fullTitle": "Pokedex Module Tests:  Reducer Should handle region selection",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var type = SELECT_REGION;\nvar payload = 2;\n_chai.assert.deepEqual((0, _reducer[\"default\"])(initialStore, {\n  type: type,\n  payload: payload\n}), mockStore({\n  selectedRegion: payload\n}));",
                "err": {},
                "isRoot": false,
                "uuid": "a6a85362-6c30-472a-9739-128573d7fd63",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should handle reset requests",
                "fullTitle": "Pokedex Module Tests:  Reducer Should handle reset requests",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var type = RESET;\n_chai.assert.deepEqual((0, _reducer[\"default\"])(mockStore({\n  selectedRegion: 2,\n  regions: {\n    kanto: 'kanto'\n  }\n}), {\n  type: type\n}), mockStore({\n  selectedRegion: '1',\n  regions: null\n}));",
                "err": {},
                "isRoot": false,
                "uuid": "e28874f5-7fd5-403e-b659-84091dec7a79",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5cd181b5-3305-4ac6-89c2-acf744e132dd",
              "6eff79b7-4888-4333-be35-40e48836f190",
              "453ad77e-ec83-49f3-8d3b-b789fd57293d",
              "a6a85362-6c30-472a-9739-128573d7fd63",
              "e28874f5-7fd5-403e-b659-84091dec7a79"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "444284a1-0f5b-4e82-a615-531529aebc43",
            "title": "Selectors",
            "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\pokedex\\__tests__\\pokedex.test.js",
            "file": "\\src\\modules\\pokedex\\__tests__\\pokedex.test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Pokedex Module Tests:  Selectors \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "// assign for each test block\nmockStore.pokedex = _utility[\"default\"].buildMockStore({\n  selectedRegion: 2,\n  regions: {\n    2: {\n      name: 'kanto',\n      id: 2,\n      pokemon: []\n    }\n  }\n});\ninitialStore.pokedex = _utility[\"default\"].buildInitialStore();",
                "err": {},
                "isRoot": false,
                "uuid": "9d913a17-9d88-4872-aa9e-93d81ce44659",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should return equals",
                "fullTitle": "Pokedex Module Tests:  Selectors Should return equals",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(selectors.getPokedexStore(mockStore)).to.deep.equal(mockStore.pokedex).and.an('object');",
                "err": {},
                "isRoot": false,
                "uuid": "b99f8766-3e6a-423f-855a-63d8022a71e8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should return the selected region Id as a number when available",
                "fullTitle": "Pokedex Module Tests:  Selectors Should return the selected region Id as a number when available",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(selectors.getSelectedRegionId(mockStore)).to.deep.equal(mockStore.pokedex.selectedRegion).and.a('number');",
                "err": {},
                "isRoot": false,
                "uuid": "eed38502-7ce1-4a4d-bb20-87c6e274da08",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should return the selected region Id as 1 when initialized",
                "fullTitle": "Pokedex Module Tests:  Selectors Should return the selected region Id as 1 when initialized",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(selectors.getSelectedRegionId(initialStore)).and.a('string');",
                "err": {},
                "isRoot": false,
                "uuid": "96b4b815-fe03-4d19-9703-4aa0925d816c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should return all regions as an indexed regions when available",
                "fullTitle": "Pokedex Module Tests:  Selectors Should return all regions as an indexed regions when available",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(selectors.getRegions(mockStore)).to.deep.equal(mockStore.pokedex.regions).and.an('object');",
                "err": {},
                "isRoot": false,
                "uuid": "d0b0ab5f-ccb3-47cb-ae81-26f8a252e01c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should return all regions as a null unavailable",
                "fullTitle": "Pokedex Module Tests:  Selectors Should return all regions as a null unavailable",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(selectors.getRegions(initialStore)).to.be.a('null');",
                "err": {},
                "isRoot": false,
                "uuid": "76f0fa52-91f4-41e4-80b9-643202f37795",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should return all regions as an array",
                "fullTitle": "Pokedex Module Tests:  Selectors Should return all regions as an array",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var regionsArray = indexedToArray({\n  indexedList: mockStore.pokedex.regions\n});\n(0, _chai.expect)(selectors.getRegionsArray(mockStore)).to.deep.equal(regionsArray).and.an('array');",
                "err": {},
                "isRoot": false,
                "uuid": "19780435-da52-4d05-b337-638ac88ad2b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should return the selected region as an object when available",
                "fullTitle": "Pokedex Module Tests:  Selectors Should return the selected region as an object when available",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(selectors.getSelectedRegion(mockStore)).to.deep.equal(mockStore.pokedex.regions[mockStore.pokedex.selectedRegion]).and.a('object');",
                "err": {},
                "isRoot": false,
                "uuid": "1026fe6f-8c70-4243-95da-610fc0a058dd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should return the selected region as null when unavailable",
                "fullTitle": "Pokedex Module Tests:  Selectors Should return the selected region as null when unavailable",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(selectors.getSelectedRegion(initialStore)).to.be.a('null');",
                "err": {},
                "isRoot": false,
                "uuid": "41744762-f7f1-41b3-83e9-458166a0dc21",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should return the selected regions pokemon as an array",
                "fullTitle": "Pokedex Module Tests:  Selectors Should return the selected regions pokemon as an array",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var pokeArray = indexedToArray({\n  indexedList: mockStore.pokedex.regions[mockStore.pokedex.selectedRegion].pokemon\n});\n(0, _chai.expect)(selectors.getSelectedPokelist(mockStore)).to.deep.equal(pokeArray).and.an('array');",
                "err": {},
                "isRoot": false,
                "uuid": "b0b27978-03a6-45f3-b1ef-3492e2448c7c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b99f8766-3e6a-423f-855a-63d8022a71e8",
              "eed38502-7ce1-4a4d-bb20-87c6e274da08",
              "96b4b815-fe03-4d19-9703-4aa0925d816c",
              "d0b0ab5f-ccb3-47cb-ae81-26f8a252e01c",
              "76f0fa52-91f4-41e4-80b9-643202f37795",
              "19780435-da52-4d05-b337-638ac88ad2b3",
              "1026fe6f-8c70-4243-95da-610fc0a058dd",
              "41744762-f7f1-41b3-83e9-458166a0dc21",
              "b0b27978-03a6-45f3-b1ef-3492e2448c7c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f283cae5-e276-4967-b8f6-a10a2bd692cd",
            "title": "Sagas: ",
            "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\pokedex\\__tests__\\pokedex.test.js",
            "file": "\\src\\modules\\pokedex\\__tests__\\pokedex.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "30295c5c-27dd-4dec-a4ac-a2a73a3f24aa",
                "title": "Fetch Pokedex sagas: ",
                "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\pokedex\\__tests__\\pokedex.test.js",
                "file": "\\src\\modules\\pokedex\\__tests__\\pokedex.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "84207196-5e37-4b14-b81f-3b17b593b5d1",
                    "title": "Watchers: ",
                    "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\pokedex\\__tests__\\pokedex.test.js",
                    "file": "\\src\\modules\\pokedex\\__tests__\\pokedex.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "Should catch fetch dex request ",
                        "fullTitle": "Pokedex Module Tests:  Sagas:  Fetch Pokedex sagas:  Watchers:  Should catch fetch dex request ",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "return (0, _reduxSagaTestPlan.testSaga)(pokedexSagas.watchFetchPokedexReq) // match to watcher\n.next() // start generator\n.takeLatest(FETCH_DEX, pokedexSagas.fetchPokedex) // match to generator\n.next() // step through generator\n.isDone();",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0f5ffd49-f6e8-4c5d-b742-771595f0c23b",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "Should catch fetch regions request ",
                        "fullTitle": "Pokedex Module Tests:  Sagas:  Fetch Pokedex sagas:  Watchers:  Should catch fetch regions request ",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "return (0, _reduxSagaTestPlan.testSaga)(pokedexSagas.watchFetchPokeRegionsReq) // match to watcher\n.next() // start generator\n.takeLatest(FETCH_REGIONS, pokedexSagas.fetchPokedexRegions) // match to generator\n.next() // step through generator\n.isDone();",
                        "err": {},
                        "isRoot": false,
                        "uuid": "754d6d15-318d-4ced-a7cc-fd838fdfc6bc",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "0f5ffd49-f6e8-4c5d-b742-771595f0c23b",
                      "754d6d15-318d-4ced-a7cc-fd838fdfc6bc"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "d5548fe1-7f50-4f53-916b-d111de535be1",
                    "title": "Series: ",
                    "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\pokedex\\__tests__\\pokedex.test.js",
                    "file": "\\src\\modules\\pokedex\\__tests__\\pokedex.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "Should successfully go through dex series",
                        "fullTitle": "Pokedex Module Tests:  Sagas:  Fetch Pokedex sagas:  Series:  Should successfully go through dex series",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var request = {\n  pokedex: 2\n};\nvar returnData = {\n  id: '2',\n  name: 'kanto',\n  pokemon_entries: [{\n    pokemon_species: {\n      url: '/2/'\n    }\n  }]\n};\nreturn (0, _reduxSagaTestPlan.expectSaga)(pokedexSagas.fetchPokedex, {\n  payload: request.pokedex\n}) // promise/generator\n.provide([// mock selector and api calls\n[matchers.call.fn(_api[\"default\"].pokedex, request), {\n  data: returnData\n}] // supply mock return data from api\n]).withReducer(_reducer[\"default\"]).hasFinalState(_utility[\"default\"].buildMockStore({\n  regions: _defineProperty({}, returnData.id, {\n    pokemon: ['2'],\n    id: '2',\n    name: 'kanto',\n    urlId: 2\n  })\n})).put(_actions[\"default\"].fetchDexSuccess(_defineProperty({}, returnData.id, {\n  pokemon: ['2'],\n  id: '2',\n  name: 'kanto',\n  urlId: 2\n}))) // eventual action that will be called\n.dispatch(_actions[\"default\"].fetchDex()) // dispatch action that starts saga\n.run();",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a10a4437-ba4d-4e1a-b982-881f40f13c34",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "Should fail dex request",
                        "fullTitle": "Pokedex Module Tests:  Sagas:  Fetch Pokedex sagas:  Series:  Should fail dex request",
                        "timedOut": false,
                        "duration": 252,
                        "state": "passed",
                        "speed": "slow",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "return (0, _reduxSagaTestPlan.expectSaga)(pokedexSagas.fetchPokedex, {\n  payload: '2'\n}).provide([// [select(getStore),'123123123'],\n[matchers.call.fn(_api[\"default\"].pokedex), (0, _providers.throwError)({\n  message: 'Error retrieving pokedex'\n})] // supply error that will be thrown by api\n]).withReducer(_reducer[\"default\"]).hasFinalState(_utility[\"default\"].buildMockStore({})).put(_actions2[\"default\"].createStoreError({\n  keyValue: _utility[\"default\"].errorSelectorDefs.dex,\n  clientErr: _utility[\"default\"].fetchDexError,\n  devErr: 'Error retrieving pokedex'\n})).put(_actions[\"default\"].fetchDexFail('Error retrieving pokedex')).dispatch(_actions[\"default\"].fetchDex('2')).silentRun();",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b402ddec-0a05-4970-91f4-7e68aefde8b6",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "Should successfully go through regions series",
                        "fullTitle": "Pokedex Module Tests:  Sagas:  Fetch Pokedex sagas:  Series:  Should successfully go through regions series",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var returnData = {\n  count: 1,\n  results: [{\n    name: 'national',\n    url: '/1/'\n  }, {\n    name: 'kanto',\n    url: '/2/'\n  }]\n};\nvar successReg = {\n  1: _objectSpread({}, returnData.results[0], {\n    urlId: '1'\n  }),\n  2: _objectSpread({}, returnData.results[1], {\n    urlId: '2'\n  })\n};\nreturn (0, _reduxSagaTestPlan.expectSaga)(pokedexSagas.fetchPokedexRegions) // promise/generator\n.provide([// mock selector and api calls\n[matchers.call.fn(_api[\"default\"].pokedexRegions), {\n  data: returnData\n}] // supply mock return data from api\n]).withReducer(_reducer[\"default\"]).hasFinalState(_utility[\"default\"].buildMockStore({\n  regions: successReg\n})).put(_actions[\"default\"].fetchRegionsSuccess(successReg)) // eventual action that will be called\n.dispatch(_actions[\"default\"].fetchRegions()) // dispatch action that starts saga\n.run();",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d22a4f91-e2d2-419b-9338-2881d89c9cf8",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "Should fail regions request",
                        "fullTitle": "Pokedex Module Tests:  Sagas:  Fetch Pokedex sagas:  Series:  Should fail regions request",
                        "timedOut": false,
                        "duration": 253,
                        "state": "passed",
                        "speed": "slow",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "return (0, _reduxSagaTestPlan.expectSaga)(pokedexSagas.fetchPokedexRegions).provide([// [select(getStore),'123123123'],\n[matchers.call.fn(_api[\"default\"].pokedexRegions), (0, _providers.throwError)({\n  message: 'Error retrieving pokedex regions'\n})] // supply error that will be thrown by api\n]).withReducer(_reducer[\"default\"]).hasFinalState(_utility[\"default\"].buildMockStore({})).put(_actions2[\"default\"].createStoreError({\n  keyValue: _utility[\"default\"].errorSelectorDefs.regions,\n  clientErr: _utility[\"default\"].fetchRegionsError,\n  devErr: 'Error retrieving pokedex regions'\n})).put(_actions[\"default\"].fetchRegionsFail('Error retrieving pokedex regions')).dispatch(_actions[\"default\"].fetchRegions()).silentRun();",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0800d630-6bab-4f03-8ee7-6f1ce29e2c6b",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "a10a4437-ba4d-4e1a-b982-881f40f13c34",
                      "b402ddec-0a05-4970-91f4-7e68aefde8b6",
                      "d22a4f91-e2d2-419b-9338-2881d89c9cf8",
                      "0800d630-6bab-4f03-8ee7-6f1ce29e2c6b"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 509,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d7eaea1e-8233-44a3-afa2-efdb0176b7f4",
        "title": "Pokelist Module Tests: ",
        "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\pokelist\\__tests__\\pokelist.test.js",
        "file": "\\src\\modules\\pokelist\\__tests__\\pokelist.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "29e48ae1-7571-40e5-9478-682ba4157a13",
            "title": "Actions (modules/pokelist/actions)",
            "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\pokelist\\__tests__\\pokelist.test.js",
            "file": "\\src\\modules\\pokelist\\__tests__\\pokelist.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should select a region",
                "fullTitle": "Pokelist Module Tests:  Actions (modules/pokelist/actions) Should select a region",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var pokemon = 2;\n_chai.assert.deepEqual(_actions[\"default\"].selectPokemon(pokemon), {\n  type: SELECT_POKEMON,\n  payload: pokemon\n});",
                "err": {},
                "isRoot": false,
                "uuid": "90bf8c6c-9366-4598-9e7c-bf43ff101f18",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should reset the pokedex store",
                "fullTitle": "Pokelist Module Tests:  Actions (modules/pokelist/actions) Should reset the pokedex store",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "_chai.assert.deepEqual(_actions[\"default\"].reset(), {\n  type: RESET\n});",
                "err": {},
                "isRoot": false,
                "uuid": "58af05cf-eaaa-498e-9c8a-8c14c4bb25e9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [
              {
                "uuid": "7c90903f-40c3-48d2-b405-1503941f0661",
                "title": "Pokelist fetch: ",
                "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\pokelist\\__tests__\\pokelist.test.js",
                "file": "\\src\\modules\\pokelist\\__tests__\\pokelist.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Should create fetch list request",
                    "fullTitle": "Pokelist Module Tests:  Actions (modules/pokelist/actions) Pokelist fetch:  Should create fetch list request",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "_chai.assert.deepEqual(_actions[\"default\"].fetchList(), {\n  type: FETCH_LIST\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a074ed14-42ee-4f07-a655-c7df174c204b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return successful list fetch",
                    "fullTitle": "Pokelist Module Tests:  Actions (modules/pokelist/actions) Pokelist fetch:  Should return successful list fetch",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var pokedex = {\n  name: 'national'\n};\n_chai.assert.deepEqual(_actions[\"default\"].fetchListSuccess(pokedex), {\n  type: FETCH_LIST_SUCCESS,\n  payload: pokedex\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "32b8534b-623a-4927-974b-62c5fa39fe69",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return failed list fetch",
                    "fullTitle": "Pokelist Module Tests:  Actions (modules/pokelist/actions) Pokelist fetch:  Should return failed list fetch",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var devErr = 'error occured';\n_chai.assert.deepEqual(_actions[\"default\"].fetchListFail(devErr), {\n  type: FETCH_LIST_FAIL,\n  payload: _utility[\"default\"].fetchListError,\n  meta: {\n    devErr: devErr\n  }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9639ddaf-4277-49ef-a34b-6c7703855d00",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return cancel fetch list request",
                    "fullTitle": "Pokelist Module Tests:  Actions (modules/pokelist/actions) Pokelist fetch:  Should return cancel fetch list request",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "_chai.assert.deepEqual(_actions[\"default\"].fetchListCancel(), {\n  type: FETCH_LIST_CANCEL\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f90e81d2-86ad-41f8-a4e6-1bee10305991",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "a074ed14-42ee-4f07-a655-c7df174c204b",
                  "32b8534b-623a-4927-974b-62c5fa39fe69",
                  "9639ddaf-4277-49ef-a34b-6c7703855d00",
                  "f90e81d2-86ad-41f8-a4e6-1bee10305991"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 1,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "8df1117b-7fde-46cd-ab8e-8f0f1af02393",
                "title": "Pokemon details fetch: ",
                "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\pokelist\\__tests__\\pokelist.test.js",
                "file": "\\src\\modules\\pokelist\\__tests__\\pokelist.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Should create fetch pokemon details request",
                    "fullTitle": "Pokelist Module Tests:  Actions (modules/pokelist/actions) Pokemon details fetch:  Should create fetch pokemon details request",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "_chai.assert.deepEqual(_actions[\"default\"].fetchMon(), {\n  type: FETCH_MON\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6c237bfe-27cb-4f13-ac28-5bcdd3da3040",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return successful pokemon details fetch",
                    "fullTitle": "Pokelist Module Tests:  Actions (modules/pokelist/actions) Pokemon details fetch:  Should return successful pokemon details fetch",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var pokemon = {\n  '1': {\n    name: 'bulbasoar',\n    urlId: '1'\n  }\n};\n_chai.assert.deepEqual(_actions[\"default\"].fetchMonSuccess(pokemon), {\n  type: FETCH_MON_SUCCESS,\n  payload: pokemon\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7b9d877a-068a-4a48-9f74-e39ba6a05db9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return failed pokemon info fetch",
                    "fullTitle": "Pokelist Module Tests:  Actions (modules/pokelist/actions) Pokemon details fetch:  Should return failed pokemon info fetch",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var devErr = 'error occured';\n_chai.assert.deepEqual(_actions[\"default\"].fetchMonFail(devErr), {\n  type: FETCH_MON_FAIL,\n  payload: _utility[\"default\"].fetchMonError,\n  meta: {\n    devErr: devErr\n  }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3ae6e53e-9341-4573-a14c-3ee041ebb7b8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return cancel fetch pokemon request",
                    "fullTitle": "Pokelist Module Tests:  Actions (modules/pokelist/actions) Pokemon details fetch:  Should return cancel fetch pokemon request",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "_chai.assert.deepEqual(_actions[\"default\"].fetchMonCancel(), {\n  type: FETCH_MON_CANCEL\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ab67536c-e696-4e38-bf3b-7921807e5a69",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "6c237bfe-27cb-4f13-ac28-5bcdd3da3040",
                  "7b9d877a-068a-4a48-9f74-e39ba6a05db9",
                  "3ae6e53e-9341-4573-a14c-3ee041ebb7b8",
                  "ab67536c-e696-4e38-bf3b-7921807e5a69"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [
              "90bf8c6c-9366-4598-9e7c-bf43ff101f18",
              "58af05cf-eaaa-498e-9c8a-8c14c4bb25e9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "81520a05-3ef0-410b-a9b7-ec693ba8ae9d",
            "title": "Reducer",
            "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\pokelist\\__tests__\\pokelist.test.js",
            "file": "\\src\\modules\\pokelist\\__tests__\\pokelist.test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Pokelist Module Tests:  Reducer \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "initialStore = buildInitialStore(); // assign for each test block",
                "err": {},
                "isRoot": false,
                "uuid": "32d8c0ea-e5e1-4621-9180-eb98afb20764",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should have initial store",
                "fullTitle": "Pokelist Module Tests:  Reducer Should have initial store",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "_chai.assert.deepEqual((0, _reducer[\"default\"])(undefined, {}), initialStore);",
                "err": {},
                "isRoot": false,
                "uuid": "e6281ffd-ac70-42db-b71d-4f19cfb0fe0a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should handle fetch list success",
                "fullTitle": "Pokelist Module Tests:  Reducer Should handle fetch list success",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var type = FETCH_LIST_SUCCESS;\nvar payload = {\n  2: {\n    name: 'bulbasoar',\n    id: 2\n  }\n};\n_chai.assert.deepEqual((0, _reducer[\"default\"])(initialStore, {\n  type: type,\n  payload: payload\n}), buildMockStore({\n  pokemon: {\n    2: payload['2']\n  }\n}));",
                "err": {},
                "isRoot": false,
                "uuid": "1fcc9f83-935c-4a4c-bc5c-998af2a10d4a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should handle fetch pokemon info success",
                "fullTitle": "Pokelist Module Tests:  Reducer Should handle fetch pokemon info success",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var type = FETCH_MON_SUCCESS;\nvar payload = {\n  name: 'bulbasoar',\n  health: 2,\n  urlId: 2\n};\n_chai.assert.deepEqual((0, _reducer[\"default\"])(buildMockStore({\n  pokemon: {\n    2: {}\n  }\n}), {\n  type: type,\n  payload: payload\n}), buildMockStore({\n  pokemon: {\n    2: payload\n  }\n}));",
                "err": {},
                "isRoot": false,
                "uuid": "8e52afd5-7d82-4bdd-bd97-bceea002fc1c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should handle pokemon selection",
                "fullTitle": "Pokelist Module Tests:  Reducer Should handle pokemon selection",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var type = SELECT_POKEMON;\nvar payload = 2;\n_chai.assert.deepEqual((0, _reducer[\"default\"])(initialStore, {\n  type: type,\n  payload: payload\n}), buildMockStore({\n  selectedPokemon: payload\n}));",
                "err": {},
                "isRoot": false,
                "uuid": "7e61e8aa-bdc4-4a01-9bec-451beb174f47",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should handle reset requests",
                "fullTitle": "Pokelist Module Tests:  Reducer Should handle reset requests",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var type = RESET;\n_chai.assert.deepEqual((0, _reducer[\"default\"])(mockStore({\n  selectedPokemon: 2,\n  pokemon: {\n    kanto: 'kanto'\n  }\n}), {\n  type: type\n}), buildMockStore({\n  selectedPokemon: null,\n  pokemon: null\n}));",
                "err": {},
                "isRoot": false,
                "uuid": "719f2aaf-f657-402f-9451-c2f90bf080f4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e6281ffd-ac70-42db-b71d-4f19cfb0fe0a",
              "1fcc9f83-935c-4a4c-bc5c-998af2a10d4a",
              "8e52afd5-7d82-4bdd-bd97-bceea002fc1c",
              "7e61e8aa-bdc4-4a01-9bec-451beb174f47",
              "719f2aaf-f657-402f-9451-c2f90bf080f4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "477805f3-873b-44a2-ae35-226ec02037a5",
            "title": "Selectors",
            "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\pokelist\\__tests__\\pokelist.test.js",
            "file": "\\src\\modules\\pokelist\\__tests__\\pokelist.test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Pokelist Module Tests:  Selectors \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "// assign for each test block\nmockStore.pokelist = buildMockStore({\n  selectedPokemon: 2,\n  pokemon: {\n    2: {\n      name: 'bulbasoar',\n      id: 2\n    }\n  }\n});\ninitialStore.pokelist = buildInitialStore();",
                "err": {},
                "isRoot": false,
                "uuid": "17e7e057-fec1-4299-945a-1c53f611a420",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should return equals",
                "fullTitle": "Pokelist Module Tests:  Selectors Should return equals",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(selectors.getPokelistStore(mockStore)).to.deep.equal(mockStore.pokelist).and.an('object');",
                "err": {},
                "isRoot": false,
                "uuid": "d5e976d3-8566-4158-8d39-601e0e714789",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should return the selected pokemon Id as a number when available",
                "fullTitle": "Pokelist Module Tests:  Selectors Should return the selected pokemon Id as a number when available",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(selectors.getSelectedPokemonId(mockStore)).to.deep.equal(mockStore.pokelist.selectedPokemon).and.a('number');",
                "err": {},
                "isRoot": false,
                "uuid": "b0f5a7a4-7f53-4f52-8f22-9c84dfde29e6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should return the selected pokemon Id as null when unavailable",
                "fullTitle": "Pokelist Module Tests:  Selectors Should return the selected pokemon Id as null when unavailable",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(selectors.getSelectedPokemonId(initialStore)).to.be.a('null');",
                "err": {},
                "isRoot": false,
                "uuid": "026193a5-e5a5-4a20-8d03-49943359304a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should return pokemon list as an index when available",
                "fullTitle": "Pokelist Module Tests:  Selectors Should return pokemon list as an index when available",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(selectors.getPokemon(mockStore)).to.deep.equal(mockStore.pokelist.pokemon).and.an('object');",
                "err": {},
                "isRoot": false,
                "uuid": "a6761bf5-0b5c-44d1-8087-f5e29a7f4246",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should return pokemon list as a null unavailable",
                "fullTitle": "Pokelist Module Tests:  Selectors Should return pokemon list as a null unavailable",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(selectors.getPokemon(initialStore)).to.be.a('null');",
                "err": {},
                "isRoot": false,
                "uuid": "333d1642-2b84-4b21-97e9-24cd099337f3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should return pokmeon list as an array",
                "fullTitle": "Pokelist Module Tests:  Selectors Should return pokmeon list as an array",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var pokemonArray = indexedToArray({\n  indexedList: mockStore.pokelist.pokemon\n});\n(0, _chai.expect)(selectors.getPokemonArray(mockStore)).to.deep.equal(pokemonArray).and.an('array');",
                "err": {},
                "isRoot": false,
                "uuid": "46d56257-21cd-4199-add8-a9d829a2ac28",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should return the selected pokemon as an object when available",
                "fullTitle": "Pokelist Module Tests:  Selectors Should return the selected pokemon as an object when available",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(selectors.getSelectedPokemon(mockStore)).to.deep.equal(mockStore.pokelist.pokemon[mockStore.pokelist.selectedPokemon]).and.a('object');",
                "err": {},
                "isRoot": false,
                "uuid": "f551f930-d7cf-441f-9222-75e56a331671",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should return the selected pokemon as null when unavailable",
                "fullTitle": "Pokelist Module Tests:  Selectors Should return the selected pokemon as null when unavailable",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(selectors.getSelectedPokemon(initialStore)).to.be.a('null');",
                "err": {},
                "isRoot": false,
                "uuid": "1e090226-24e8-44a5-8d9e-553be1ac9b41",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d5e976d3-8566-4158-8d39-601e0e714789",
              "b0f5a7a4-7f53-4f52-8f22-9c84dfde29e6",
              "026193a5-e5a5-4a20-8d03-49943359304a",
              "a6761bf5-0b5c-44d1-8087-f5e29a7f4246",
              "333d1642-2b84-4b21-97e9-24cd099337f3",
              "46d56257-21cd-4199-add8-a9d829a2ac28",
              "f551f930-d7cf-441f-9222-75e56a331671",
              "1e090226-24e8-44a5-8d9e-553be1ac9b41"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "19f4e104-f582-4cdb-b8cc-43c7f6af82c0",
            "title": "Sagas: ",
            "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\pokelist\\__tests__\\pokelist.test.js",
            "file": "\\src\\modules\\pokelist\\__tests__\\pokelist.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "2657b557-3e21-4772-a0c3-c9565388529b",
                "title": "Fetch List sagas: ",
                "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\pokelist\\__tests__\\pokelist.test.js",
                "file": "\\src\\modules\\pokelist\\__tests__\\pokelist.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "cbe3f4ad-8e54-46de-b8bf-9df03226c824",
                    "title": "Watchers: ",
                    "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\pokelist\\__tests__\\pokelist.test.js",
                    "file": "\\src\\modules\\pokelist\\__tests__\\pokelist.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "Should catch fetch list request ",
                        "fullTitle": "Pokelist Module Tests:  Sagas:  Fetch List sagas:  Watchers:  Should catch fetch list request ",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "return (0, _reduxSagaTestPlan.testSaga)(pokelistSagas.watchFetchPokelistReq) // match to watcher\n.next() // start generator\n.takeLatest(FETCH_LIST, pokelistSagas.fetchPokelist) // match to generator\n.next() // step through generator\n.isDone();",
                        "err": {},
                        "isRoot": false,
                        "uuid": "378ee036-bf19-415c-92c6-b50a2185c4e8",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "378ee036-bf19-415c-92c6-b50a2185c4e8"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "09805b10-fa1b-4d1c-aa05-e341008d2da2",
                    "title": "Series: ",
                    "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\pokelist\\__tests__\\pokelist.test.js",
                    "file": "\\src\\modules\\pokelist\\__tests__\\pokelist.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "Should successfully go through list series",
                        "fullTitle": "Pokelist Module Tests:  Sagas:  Fetch List sagas:  Series:  Should successfully go through list series",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var returnData = {\n  description: {},\n  pokemon_entries: [{\n    entry_number: 1,\n    pokemon_species: {\n      name: 'bulbasaur',\n      url: '/'\n    }\n  }]\n};\nreturn (0, _reduxSagaTestPlan.expectSaga)(pokelistSagas.fetchPokelist) // promise/generator\n.provide([// mock selector and api calls\n[matchers.call.fn(_api[\"default\"].pokelist), {\n  data: returnData\n}] // supply mock return data from api\n]).withReducer(_reducer[\"default\"]).hasFinalState(_utility[\"default\"].buildMockStore({\n  pokemon: {\n    1: _objectSpread({\n      urlId: 1\n    }, returnData.pokemon_entries[0].pokemon_species)\n  }\n})).dispatch(_actions3[\"default\"].appHideOverlay()).put(_actions[\"default\"].fetchListSuccess({\n  1: _objectSpread({\n    urlId: returnData.pokemon_entries[0].entry_number\n  }, returnData.pokemon_entries[0].pokemon_species)\n})).dispatch(_actions3[\"default\"].appShowOverlay()).dispatch(_actions[\"default\"].fetchList()) // dispatch action that starts saga\n.run();",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d4e47b41-ed23-4056-aa5a-ac6d76950031",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "Should fail list request",
                        "fullTitle": "Pokelist Module Tests:  Sagas:  Fetch List sagas:  Series:  Should fail list request",
                        "timedOut": false,
                        "duration": 252,
                        "state": "passed",
                        "speed": "slow",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "return (0, _reduxSagaTestPlan.expectSaga)(pokelistSagas.fetchPokelist).provide([// [select(getStore),'123123123'],\n[matchers.call.fn(_api[\"default\"].pokelist), (0, _providers.throwError)({\n  message: 'Error retrieving pokelist'\n})] // supply error that will be thrown by api\n]).withReducer(_reducer[\"default\"]).hasFinalState(_utility[\"default\"].buildMockStore({})).put(_actions2[\"default\"].createStoreError({\n  keyValue: _utility[\"default\"].errorSelectorDefs.list,\n  clientErr: _utility[\"default\"].fetchListError,\n  devErr: 'Error retrieving pokelist'\n})).put(_actions[\"default\"].fetchListFail('Error retrieving pokelist')).dispatch(_actions[\"default\"].fetchList()).silentRun();",
                        "err": {},
                        "isRoot": false,
                        "uuid": "58279d8e-34e5-418a-9bd1-7864ac92a983",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "d4e47b41-ed23-4056-aa5a-ac6d76950031",
                      "58279d8e-34e5-418a-9bd1-7864ac92a983"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 255,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "29e76404-ecd6-4d38-b023-17ae3dbc019b",
                "title": "Fetch Pokemon sagas: ",
                "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\pokelist\\__tests__\\pokelist.test.js",
                "file": "\\src\\modules\\pokelist\\__tests__\\pokelist.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "5c79bfa9-cb6f-4fc1-8d5d-5f663f1f9cf6",
                    "title": "Watchers: ",
                    "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\pokelist\\__tests__\\pokelist.test.js",
                    "file": "\\src\\modules\\pokelist\\__tests__\\pokelist.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "Should catch fetch pokemon request ",
                        "fullTitle": "Pokelist Module Tests:  Sagas:  Fetch Pokemon sagas:  Watchers:  Should catch fetch pokemon request ",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "return (0, _reduxSagaTestPlan.testSaga)(pokelistSagas.watchFetchPokemonReq) // match to watcher\n.next() // start generator\n.takeLatest(FETCH_MON, pokelistSagas.fetchPokemon) // match to generator\n.next() // step through generator\n.isDone();",
                        "err": {},
                        "isRoot": false,
                        "uuid": "94ddbcf7-d691-40a7-9198-e11ece05226f",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "94ddbcf7-d691-40a7-9198-e11ece05226f"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "f6ee4d0b-f78b-4aae-96b7-83bec6c88324",
                    "title": "Series: ",
                    "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\pokelist\\__tests__\\pokelist.test.js",
                    "file": "\\src\\modules\\pokelist\\__tests__\\pokelist.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "Should successfully go through mon series",
                        "fullTitle": "Pokelist Module Tests:  Sagas:  Fetch Pokemon sagas:  Series:  Should successfully go through mon series",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var returnData = {\n  name: 'bulbasore',\n  height: 7,\n  id: 1\n};\nvar initialStore = _utility[\"default\"].buildMockStore({\n  pokemon: {\n    1: {\n      urlId: 1,\n      url: '/pokemon/1',\n      name: 'bulbasore'\n    }\n  }\n});\nreturn (0, _reduxSagaTestPlan.expectSaga)(pokelistSagas.fetchPokemon) // promise/generator\n.provide([// mock selector and api calls\n[(0, _effects.select)(pokeListSelectors.getSelectedPokemon), {\n  urlId: '1',\n  url: '/pokemon/1'\n}], [matchers.call.fn(_api[\"default\"].pokemon), {\n  data: returnData\n}] // supply mock return data from api\n]).withReducer(_reducer[\"default\"], initialStore).hasFinalState(_utility[\"default\"].buildMockStore({\n  pokemon: {\n    1: _objectSpread({}, returnData, {\n      urlId: '1',\n      url: '/pokemon/1'\n    })\n  }\n})).put(_actions[\"default\"].fetchMonSuccess(_objectSpread({}, returnData, {\n  urlId: '1',\n  url: '/pokemon/1'\n}))) // eventual action that will be called\n.dispatch(_actions[\"default\"].fetchMon()) // dispatch action that starts saga\n.run();",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1a77eba8-1df2-4b77-9467-e24c724e3763",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "Should fail pokemon request",
                        "fullTitle": "Pokelist Module Tests:  Sagas:  Fetch Pokemon sagas:  Series:  Should fail pokemon request",
                        "timedOut": false,
                        "duration": 252,
                        "state": "passed",
                        "speed": "slow",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "return (0, _reduxSagaTestPlan.expectSaga)(pokelistSagas.fetchPokemon).provide([[(0, _effects.select)(pokeListSelectors.getSelectedPokemon), {\n  urlId: '1'\n}], [matchers.call.fn(_api[\"default\"].pokemon), (0, _providers.throwError)({\n  message: 'Error retrieving pokemon'\n})] // supply error that will be thrown by api\n]).withReducer(_reducer[\"default\"]).hasFinalState(_utility[\"default\"].buildMockStore({})).put(_actions2[\"default\"].createStoreError({\n  keyValue: _utility[\"default\"].errorSelectorDefs.mon,\n  clientErr: _utility[\"default\"].fetchMonError,\n  devErr: 'Error retrieving pokemon'\n})).put(_actions[\"default\"].fetchMonFail('Error retrieving pokemon')).dispatch(_actions[\"default\"].fetchMon()).silentRun();",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8118dfad-6b2e-4efb-92c1-5b35cd6a489e",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "1a77eba8-1df2-4b77-9467-e24c724e3763",
                      "8118dfad-6b2e-4efb-92c1-5b35cd6a489e"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 254,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "67b931d8-e18f-4e14-9fac-20d30ed82ee9",
        "title": "User Module Tests: ",
        "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\user\\__tests__\\user.test.js",
        "file": "\\src\\modules\\user\\__tests__\\user.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "fc2bb8e0-7982-4253-acef-8640bb602663",
            "title": "Actions: ",
            "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\user\\__tests__\\user.test.js",
            "file": "\\src\\modules\\user\\__tests__\\user.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should reset store",
                "fullTitle": "User Module Tests:  Actions:  Should reset store",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "_chai.assert.deepEqual(_actions[\"default\"].reset(), {\n  type: RESET\n});",
                "err": {},
                "isRoot": false,
                "uuid": "301c8718-e774-477a-b2dd-14733d193483",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [
              {
                "uuid": "b35b0c67-86b4-49e1-824e-c94a3bbc3eca",
                "title": "Login Requests: ",
                "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\user\\__tests__\\user.test.js",
                "file": "\\src\\modules\\user\\__tests__\\user.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Should create user login request",
                    "fullTitle": "User Module Tests:  Actions:  Login Requests:  Should create user login request",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var userInfo = {\n  username: 'username',\n  password: 'pass'\n};\n_chai.assert.deepEqual(_actions[\"default\"].login(userInfo), {\n  type: LOGIN,\n  payload: userInfo\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "930fdd4a-f713-4b53-99d3-5ba47ff1c718",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return successful user login",
                    "fullTitle": "User Module Tests:  Actions:  Login Requests:  Should return successful user login",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var userInfo = {\n  fName: 'Sherlock',\n  lName: 'Holmes'\n};\n_chai.assert.deepEqual(_actions[\"default\"].loginSuccess(userInfo), {\n  type: LOGIN_SUCCESS,\n  payload: userInfo\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f44059f7-2283-4291-ab7c-bc60bb0fcfdb",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return failed user login",
                    "fullTitle": "User Module Tests:  Actions:  Login Requests:  Should return failed user login",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var devErr = 'error occured';\n_chai.assert.deepEqual(_actions[\"default\"].loginFail(devErr), {\n  type: LOGIN_FAIL,\n  payload: _utility[\"default\"].loginError,\n  meta: {\n    devErr: devErr\n  }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "589178bb-ad7c-4e93-802f-73ad47b777f0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return cancel user login request",
                    "fullTitle": "User Module Tests:  Actions:  Login Requests:  Should return cancel user login request",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "_chai.assert.deepEqual(_actions[\"default\"].loginCancel(), {\n  type: LOGIN_CANCEL\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b9e8ba44-5f0f-4d35-a1e5-6ffc229776e5",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "930fdd4a-f713-4b53-99d3-5ba47ff1c718",
                  "f44059f7-2283-4291-ab7c-bc60bb0fcfdb",
                  "589178bb-ad7c-4e93-802f-73ad47b777f0",
                  "b9e8ba44-5f0f-4d35-a1e5-6ffc229776e5"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 2,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "2196751a-4a51-4191-ac02-a003ce6215e1",
                "title": "Logout Requests: ",
                "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\user\\__tests__\\user.test.js",
                "file": "\\src\\modules\\user\\__tests__\\user.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Should create user logout request",
                    "fullTitle": "User Module Tests:  Actions:  Logout Requests:  Should create user logout request",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var userHash = '12341fasdfa3fa';\n_chai.assert.deepEqual(_actions[\"default\"].logout(userHash), {\n  type: LOGOUT,\n  payload: userHash\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0871bd1d-7689-49d8-9f67-21991b1a162b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return successful user logout",
                    "fullTitle": "User Module Tests:  Actions:  Logout Requests:  Should return successful user logout",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "_chai.assert.deepEqual(_actions[\"default\"].logoutSuccess(), {\n  type: LOGOUT_SUCCESS\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "70a73ce8-3c0e-43da-ab2a-ab4d62ce3923",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return failed user logout",
                    "fullTitle": "User Module Tests:  Actions:  Logout Requests:  Should return failed user logout",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var devErr = 'error occured';\n_chai.assert.deepEqual(_actions[\"default\"].logoutFail(devErr), {\n  type: LOGOUT_FAIL,\n  payload: _utility[\"default\"].logoutError,\n  meta: {\n    devErr: devErr\n  }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fd626d93-9af2-4a49-bba0-2021fa3752eb",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "0871bd1d-7689-49d8-9f67-21991b1a162b",
                  "70a73ce8-3c0e-43da-ab2a-ab4d62ce3923",
                  "fd626d93-9af2-4a49-bba0-2021fa3752eb"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 1,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "996f29e1-b2ce-4919-9446-da6a628e7ee3",
                "title": "Cached Login Requests: ",
                "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\user\\__tests__\\user.test.js",
                "file": "\\src\\modules\\user\\__tests__\\user.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Should create cached login request",
                    "fullTitle": "User Module Tests:  Actions:  Cached Login Requests:  Should create cached login request",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "_chai.assert.deepEqual(_actions[\"default\"].cachedLogin(), {\n  type: CACHED_LOGIN\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "27984205-9b3a-40bb-98b3-0b09471f9dbe",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return successful cached login",
                    "fullTitle": "User Module Tests:  Actions:  Cached Login Requests:  Should return successful cached login",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var userInfo = {\n  fName: 'Sherlock',\n  lName: 'Holmes'\n};\n_chai.assert.deepEqual(_actions[\"default\"].cachedLoginSuccess(userInfo), {\n  type: CACHED_LOGIN_ACCEPTED,\n  payload: userInfo\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8e210866-fc44-4744-8bc8-b99b6c83e27d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return failed cached login",
                    "fullTitle": "User Module Tests:  Actions:  Cached Login Requests:  Should return failed cached login",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var devErr = 'error occured';\n_chai.assert.deepEqual(_actions[\"default\"].cachedLoginFail(devErr), {\n  type: CACHED_LOGIN_DECLINED,\n  payload: _utility[\"default\"].cachedLoginError,\n  meta: {\n    devErr: devErr\n  }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "da005f0a-bafb-4bf0-b1a1-08963c1371fb",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "27984205-9b3a-40bb-98b3-0b09471f9dbe",
                  "8e210866-fc44-4744-8bc8-b99b6c83e27d",
                  "da005f0a-bafb-4bf0-b1a1-08963c1371fb"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [
              "301c8718-e774-477a-b2dd-14733d193483"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "7b20e0e7-d1f2-4514-9251-e17436cc7d5c",
            "title": "Reducer",
            "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\user\\__tests__\\user.test.js",
            "file": "\\src\\modules\\user\\__tests__\\user.test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "User Module Tests:  Reducer \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "initialStore = buildInitialStore(); // assign for each test block",
                "err": {},
                "isRoot": false,
                "uuid": "c8219a08-d0c3-4ae4-bf75-7753fe7b4b49",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should have initial store",
                "fullTitle": "User Module Tests:  Reducer Should have initial store",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "_chai.assert.deepEqual((0, _reducer[\"default\"])(undefined, {}), initialStore);",
                "err": {},
                "isRoot": false,
                "uuid": "bd10e2fb-8ffb-4349-bf7b-b336cdbafb3a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should handle user login success",
                "fullTitle": "User Module Tests:  Reducer Should handle user login success",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var type = CACHED_LOGIN_ACCEPTED;\nvar payload = {\n  firstName: 'Sherlock',\n  lastName: 'Holmes'\n};\n_chai.assert.deepEqual((0, _reducer[\"default\"])(initialStore, {\n  type: type,\n  payload: payload\n}), buildMockStore({\n  info: _objectSpread({}, payload)\n}));",
                "err": {},
                "isRoot": false,
                "uuid": "81bfcf18-365c-465a-bef8-ded806daff4d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should handle cached login success",
                "fullTitle": "User Module Tests:  Reducer Should handle cached login success",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var type = LOGIN_SUCCESS;\nvar payload = {\n  firstName: 'Sherlock',\n  lastName: 'Holmes'\n};\n_chai.assert.deepEqual((0, _reducer[\"default\"])(initialStore, {\n  type: type,\n  payload: payload\n}), buildMockStore({\n  info: _objectSpread({}, payload)\n}));",
                "err": {},
                "isRoot": false,
                "uuid": "951ff27e-3776-44ef-bfd0-461a76e12fcb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should handle user logout success",
                "fullTitle": "User Module Tests:  Reducer Should handle user logout success",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var type = LOGOUT_SUCCESS;\n_chai.assert.deepEqual((0, _reducer[\"default\"])(buildMockStore({\n  info: {\n    firstName: 'Ms',\n    lastName: 'Jackson'\n  }\n}), {\n  type: type\n}), buildMockStore({\n  info: null\n}));",
                "err": {},
                "isRoot": false,
                "uuid": "fccdc79f-0026-4b34-b1ea-b6e92f588d79",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should handle user logout fail",
                "fullTitle": "User Module Tests:  Reducer Should handle user logout fail",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var type = LOGOUT_FAIL;\n_chai.assert.deepEqual((0, _reducer[\"default\"])(buildMockStore({\n  info: {\n    firstName: 'Ms',\n    lastName: 'Jackson'\n  }\n}), {\n  type: type\n}), buildMockStore({\n  info: null\n}));",
                "err": {},
                "isRoot": false,
                "uuid": "bb2cdf3c-3ede-4b6e-9a9e-c2c45bd1d679",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should handle reset requests",
                "fullTitle": "User Module Tests:  Reducer Should handle reset requests",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var type = RESET;\n_chai.assert.deepEqual((0, _reducer[\"default\"])(mockStore({\n  info: {\n    firstName: 'Ms',\n    lastName: 'Jackson'\n  }\n}), {\n  type: type\n}), initialStore);",
                "err": {},
                "isRoot": false,
                "uuid": "032da466-4c25-4dfa-9418-0d2c379ba323",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bd10e2fb-8ffb-4349-bf7b-b336cdbafb3a",
              "81bfcf18-365c-465a-bef8-ded806daff4d",
              "951ff27e-3776-44ef-bfd0-461a76e12fcb",
              "fccdc79f-0026-4b34-b1ea-b6e92f588d79",
              "bb2cdf3c-3ede-4b6e-9a9e-c2c45bd1d679",
              "032da466-4c25-4dfa-9418-0d2c379ba323"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "06fd34e4-d2b8-45a6-a333-6000c807496c",
            "title": "Selectors",
            "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\user\\__tests__\\user.test.js",
            "file": "\\src\\modules\\user\\__tests__\\user.test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "User Module Tests:  Selectors \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "// assign for each test block\nmockStore.user = buildMockStore({\n  info: {\n    firstName: 'dropda',\n    lastName: 'mic'\n  }\n});\ninitialStore.user = buildInitialStore();",
                "err": {},
                "isRoot": false,
                "uuid": "5ed177d0-3cd2-4ba2-9199-e3902d1de6bb",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should return equals",
                "fullTitle": "User Module Tests:  Selectors Should return equals",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(selectors.getUserStore(mockStore)).to.deep.equal(mockStore.user).and.an('object');",
                "err": {},
                "isRoot": false,
                "uuid": "9c993cd7-edcb-48bf-ac82-297df73da9b7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should return null when no user is available",
                "fullTitle": "User Module Tests:  Selectors Should return null when no user is available",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(selectors.getUserInfo(initialStore)).to.be.a('null');",
                "err": {},
                "isRoot": false,
                "uuid": "f3afc6c4-abc1-440c-8824-9266123aad14",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should return user info when available",
                "fullTitle": "User Module Tests:  Selectors Should return user info when available",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(selectors.getUserInfo(mockStore)).to.deep.equal(mockStore.user.info).and.an('object');",
                "err": {},
                "isRoot": false,
                "uuid": "4e8b28e2-f609-4a26-937f-44be937ddf61",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should return user full name when available",
                "fullTitle": "User Module Tests:  Selectors Should return user full name when available",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(selectors.getUserName(mockStore)).to.deep.equal(\"\".concat(mockStore.user.info.firstName, \" \").concat(mockStore.user.info.lastName)).and.a('string');",
                "err": {},
                "isRoot": false,
                "uuid": "5bf3e9c2-1175-42cb-ad25-bfa372851185",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9c993cd7-edcb-48bf-ac82-297df73da9b7",
              "f3afc6c4-abc1-440c-8824-9266123aad14",
              "4e8b28e2-f609-4a26-937f-44be937ddf61",
              "5bf3e9c2-1175-42cb-ad25-bfa372851185"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "0ff9d336-2442-4202-b6a5-f149dfc5a799",
            "title": "Sagas: ",
            "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\user\\__tests__\\user.test.js",
            "file": "\\src\\modules\\user\\__tests__\\user.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "32e318ab-895a-44e4-b74e-ca854a49584a",
                "title": "User Login Sagas: ",
                "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\user\\__tests__\\user.test.js",
                "file": "\\src\\modules\\user\\__tests__\\user.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "a3e886f1-9b04-48b2-a226-33c98814bc8f",
                    "title": "Watchers: ",
                    "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\user\\__tests__\\user.test.js",
                    "file": "\\src\\modules\\user\\__tests__\\user.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "Should catch user login request ",
                        "fullTitle": "User Module Tests:  Sagas:  User Login Sagas:  Watchers:  Should catch user login request ",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "return (0, _reduxSagaTestPlan.testSaga)(userSagas.watchLoginReq) // match to watcher\n.next() // start generator\n.takeLatest(LOGIN, userSagas.login) // match to generator\n.next() // step through generator\n.isDone();",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c201b9f5-6848-410d-a4db-bd00b93f4f5d",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "c201b9f5-6848-410d-a4db-bd00b93f4f5d"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 1,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "0bef1e90-a8d7-4b3b-b6b1-1a3d6da9df23",
                    "title": "Login Series: ",
                    "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\user\\__tests__\\user.test.js",
                    "file": "\\src\\modules\\user\\__tests__\\user.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "Should successfully go through login series",
                        "fullTitle": "User Module Tests:  Sagas:  User Login Sagas:  Login Series:  Should successfully go through login series",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var loginInfo = {\n  username: 'username',\n  password: 'pass'\n};\nvar returnData = {\n  hash: 'AF#ASDFA#@FASDFA12351',\n  firstName: 'Carm',\n  lastName: 'Mello'\n};\nreturn (0, _reduxSagaTestPlan.expectSaga)(userSagas.login, {\n  payload: loginInfo\n}) // promise/generator\n.provide([// mock selector and api calls\n[matchers.call.fn(_api[\"default\"].userLogin), {\n  data: returnData\n}] // supply mock return data from api\n]).withReducer(_reducer[\"default\"]).hasFinalState(_utility[\"default\"].buildMockStore({\n  info: {\n    firstName: returnData.firstName,\n    lastName: returnData.lastName\n  }\n})).put(_actions[\"default\"].loginSuccess({\n  firstName: returnData.firstName,\n  lastName: returnData.lastName\n})).dispatch(_actions[\"default\"].login(loginInfo)) // dispatch action that starts saga\n.silentRun(500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0ae7f11d-4a83-4021-8ab1-b53131597518",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "Should fail going through login series",
                        "fullTitle": "User Module Tests:  Sagas:  User Login Sagas:  Login Series:  Should fail going through login series",
                        "timedOut": false,
                        "duration": 254,
                        "state": "passed",
                        "speed": "slow",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "return (0, _reduxSagaTestPlan.expectSaga)(userSagas.login, {\n  payload: {\n    username: 'username',\n    password: 'pass'\n  }\n}).provide([// [select(getStore),'123123123'],\n[matchers.call.fn(_api[\"default\"].userLogin), (0, _providers.throwError)({\n  message: 'Error logging in user'\n})] // supply error that will be thrown by api\n]).withReducer(_reducer[\"default\"]).hasFinalState(_utility[\"default\"].buildMockStore({\n  info: null\n})).put(_actions2[\"default\"].createStoreError({\n  keyValue: _utility[\"default\"].errorSelectorDefs.login,\n  clientErr: _utility[\"default\"].loginError,\n  devErr: 'Error logging in user'\n})).put(_actions[\"default\"].loginFail('Error logging in user')).dispatch(_actions[\"default\"].login()).run();",
                        "err": {},
                        "isRoot": false,
                        "uuid": "81f7d223-185c-46a4-8425-234245c9cdff",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "0ae7f11d-4a83-4021-8ab1-b53131597518",
                      "81f7d223-185c-46a4-8425-234245c9cdff"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 256,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "ab458e90-f25e-4d9f-a5bc-2d8d3eb7a0e9",
                "title": "User Logout Sagas: ",
                "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\user\\__tests__\\user.test.js",
                "file": "\\src\\modules\\user\\__tests__\\user.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "b4352d1d-4fe6-4841-bd03-9d01f738c238",
                    "title": "Watchers: ",
                    "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\user\\__tests__\\user.test.js",
                    "file": "\\src\\modules\\user\\__tests__\\user.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "Should catch logout request ",
                        "fullTitle": "User Module Tests:  Sagas:  User Logout Sagas:  Watchers:  Should catch logout request ",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "return (0, _reduxSagaTestPlan.testSaga)(userSagas.watchLogoutReq) // match to watcher\n.next() // start generator\n.takeLatest(LOGOUT, userSagas.logout) // match to generator\n.next() // step through generator\n.isDone();",
                        "err": {},
                        "isRoot": false,
                        "uuid": "cfc461d7-5b41-4e90-8349-fe8d5c4cc67a",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "cfc461d7-5b41-4e90-8349-fe8d5c4cc67a"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 1,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "9a0b98c3-ed5e-4808-8375-4b4bac78113f",
                    "title": "Logout Series: ",
                    "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\user\\__tests__\\user.test.js",
                    "file": "\\src\\modules\\user\\__tests__\\user.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "Should successfully go through logout series",
                        "fullTitle": "User Module Tests:  Sagas:  User Logout Sagas:  Logout Series:  Should successfully go through logout series",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var hash = {\n  hash: 'fq3asedfaf'\n};\nvar returnData = {\n  success: true\n};\nreturn (0, _reduxSagaTestPlan.expectSaga)(userSagas.logout, {\n  payload: hash\n}) // promise/generator\n.provide([// mock selector and api calls\n[(0, _effects.select)(userSelectors.getUserInfo), {\n  username: 'user'\n}], [matchers.call.fn(_api[\"default\"].userLogout), {\n  data: returnData\n}] // supply mock return data from api\n]).withReducer(_reducer[\"default\"]).hasFinalState(_utility[\"default\"].buildInitialStore()).put(_actions[\"default\"].logoutSuccess()).dispatch(_actions[\"default\"].logout()) // dispatch action that starts saga\n.run();",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4cc4c82c-93fa-4349-b083-06a7d4f402f4",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "Should fail going through logout series",
                        "fullTitle": "User Module Tests:  Sagas:  User Logout Sagas:  Logout Series:  Should fail going through logout series",
                        "timedOut": false,
                        "duration": 502,
                        "state": "passed",
                        "speed": "slow",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "return (0, _reduxSagaTestPlan.expectSaga)(userSagas.logout, {\n  payload: {\n    hash: '23fq23fawea'\n  }\n}).provide([[(0, _effects.select)(userSelectors.getUserInfo), {\n  username: 'user'\n}], [matchers.call.fn(_api[\"default\"].userLogout), (0, _providers.throwError)({\n  message: 'Error logging out user'\n})] // supply error that will be thrown by api\n]).withReducer(_reducer[\"default\"]).hasFinalState(_utility[\"default\"].buildInitialStore()).put(_actions3[\"default\"].appCreateLog('Error logging out user', {\n  username: 'user'\n}, 'Error logging out user')).put(_actions2[\"default\"].createStoreError({\n  keyValue: _utility[\"default\"].errorSelectorDefs.logout,\n  clientErr: _utility[\"default\"].logoutError,\n  devErr: 'Error logging out user'\n})).put(_actions[\"default\"].logoutFail('Error logging out user')).dispatch(_actions[\"default\"].logout()).silentRun(500);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c188f966-be09-4509-8a47-22adcde1c38b",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "4cc4c82c-93fa-4349-b083-06a7d4f402f4",
                      "c188f966-be09-4509-8a47-22adcde1c38b"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 503,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "f5bd2fca-4aba-4f06-bf39-3060a4ee0f1c",
                "title": "Cached Login Series: ",
                "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\user\\__tests__\\user.test.js",
                "file": "\\src\\modules\\user\\__tests__\\user.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "f98b3d10-e148-48a1-8336-952a77f14acf",
                    "title": "Watchers: ",
                    "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\user\\__tests__\\user.test.js",
                    "file": "\\src\\modules\\user\\__tests__\\user.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "Should catch cached login request ",
                        "fullTitle": "User Module Tests:  Sagas:  Cached Login Series:  Watchers:  Should catch cached login request ",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "return (0, _reduxSagaTestPlan.testSaga)(userSagas.watchCachedLoginReq) // match to watcher\n.next() // start generator\n.takeLatest(CACHED_LOGIN, userSagas.cachedLogin) // match to generator\n.next() // step through generator\n.isDone();",
                        "err": {},
                        "isRoot": false,
                        "uuid": "565fe808-56c2-41a3-b8f3-bd14abc0e121",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "565fe808-56c2-41a3-b8f3-bd14abc0e121"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 2,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "12f56ba3-03fa-477e-bcfd-72be4ee6b78d",
                    "title": "Cached Login Series",
                    "fullFile": "R:\\Other\\Programming\\Javascript\\CBRA-base\\src\\modules\\user\\__tests__\\user.test.js",
                    "file": "\\src\\modules\\user\\__tests__\\user.test.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "Should successfully go through cached login series",
                        "fullTitle": "User Module Tests:  Sagas:  Cached Login Series:  Cached Login Series Should successfully go through cached login series",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var userData = {\n  hash: 'fq3asedfaf',\n  firstName: 'first',\n  lastName: 'notLast'\n};\nreturn (0, _reduxSagaTestPlan.expectSaga)(userSagas.cachedLogin) // promise/generator\n.provide([// mock selector and api calls\n[matchers.call.fn(_utility[\"default\"].getUserFromLocalStorage), JSON.stringify({\n  CBRA: {\n    hash: 'fq3asedfaf'\n  }\n})], [matchers.call.fn(_api[\"default\"].cachedLogin), {\n  data: userData\n}] // supply mock return data from api\n]).withReducer(_reducer[\"default\"]).hasFinalState(_utility[\"default\"].buildMockStore({\n  info: {\n    firstName: userData.firstName,\n    lastName: userData.lastName\n  }\n})).put(_actions[\"default\"].cachedLoginSuccess({\n  firstName: userData.firstName,\n  lastName: userData.lastName\n})).dispatch(_actions[\"default\"].cachedLogin()) // dispatch action that starts saga\n.run();",
                        "err": {},
                        "isRoot": false,
                        "uuid": "20450023-e587-4c9d-b3d9-3049d64c5d17",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "Should fail going through cached login series",
                        "fullTitle": "User Module Tests:  Sagas:  Cached Login Series:  Cached Login Series Should fail going through cached login series",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "return (0, _reduxSagaTestPlan.expectSaga)(userSagas.cachedLogin, {\n  payload: {\n    hash: 'fq3asedfaf'\n  }\n}).provide([[matchers.call.fn(_api[\"default\"].cachedLogin, {\n  data: {\n    success: false\n  }\n}), (0, _providers.throwError)({\n  message: 'User not logged in'\n})], // supply error that will be thrown by api\n[matchers.call.fn(_utility[\"default\"].getUserFromLocalStorage), JSON.stringify({\n  CBRA: {\n    hash: 'fq3asedfaf'\n  }\n})] // supply error that will be thrown by api\n]).withReducer(_reducer[\"default\"]).hasFinalState(_utility[\"default\"].buildMockStore(null)).put(_actions2[\"default\"].createStoreError({\n  keyValue: _utility[\"default\"].errorSelectorDefs.cachedLogin,\n  clientErr: _utility[\"default\"].cachedLoginError,\n  devErr: 'User not logged in'\n})).put(_actions[\"default\"].cachedLoginFail('User not logged in')).dispatch(_actions[\"default\"].cachedLogin()).run();",
                        "err": {},
                        "isRoot": false,
                        "uuid": "947a2c4e-8614-430c-b79a-8d2a10bc4ea8",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "20450023-e587-4c9d-b3d9-3049d64c5d17",
                      "947a2c4e-8614-430c-b79a-8d2a10bc4ea8"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 2,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}